trigger:
  branches:
    include:
    - master
  paths:
    include:
    - source/*
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"

variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  testArtifactName: testResults
  sourceFolderName: source
  defaultBranch: master

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'windows-latest'
        steps:
          - pwsh: |
              dotnet tool install --global GitVersion.Tool
              $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
              $gitVersionObject.PSObject.Properties.ForEach{
                  Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
                  Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
              }
              Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
            displayName: Calculate ModuleVersion (GitVersion)
          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(NuGetVersionV2)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
      - job: Test_HQRM
        displayName: 'HQRM'
        pool:
          vmImage: 'windows-latest'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run HQRM Test'
            inputs:
              filePath: './build.ps1'
              arguments: '-Tasks hqrmtest'
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'HQRM'

      - job: Test_Unit_2013
        displayName: 'Unit OWA 2013'
        pool:
          vmImage: 'windows-latest'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test for OWA 2013'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript @(@{ Path = '$(Build.SourcesDirectory)/Tests/Unit'; Parameters = @{WACCmdletModule = '$(Build.SourcesDirectory)/Tests/Unit/Stubs/15.0.4569.1506/OfficeWebApps.psm1' }})"
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Unit OWA 2013'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/'
              artifactName: 'CodeCoverage_2013'
              parallel: true

      - job: Test_Unit_2016
        displayName: 'Unit OOS 2016'
        pool:
          vmImage: 'windows-latest'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test for OOS 2016'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript @(@{ Path = '$(Build.SourcesDirectory)/Tests/Unit'; Parameters = @{WACCmdletModule = '$(Build.SourcesDirectory)/Tests/Unit/Stubs/16.0.6814.2226/OfficeWebApps.psm1' }})"
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Unit OOS 2016'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/'
              artifactName: 'CodeCoverage_2016'
              parallel: true

      - job: MergeCodeCoverage
        dependsOn:
        - 'Test_Unit_2013'
        - 'Test_Unit_2016'
        displayName: 'Merge Code Coverage'
        pool:
          vmImage: 'windows-latest'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'


      - job: Code_Coverage
        displayName: 'Publish Code Coverage'
        dependsOn:
          - 'Test_Unit_2013'
          - 'Test_Unit_2016'
        pool:
          vmImage: 'ubuntu-latest'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Test Artifact OWA 2013'
            inputs:
              buildType: 'current'
              artifactName: 'CodeCoverage_2013'
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Test Artifact OOS 2016'
            inputs:
              buildType: 'current'
              artifactName: 'CodeCoverage_2016'
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: merge
            displayName: 'Merge Code Coverage files'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks merge"
              pwsh: false
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage to Azure DevOps'
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(Build.SourcesDirectory)/$(buildFolderName)/CodeCov_Merged.xml'
              pathToSources: '$(Build.SourcesDirectory)/$(sourceFolderName)/'
          - script: |
              bash <(curl -s https://codecov.io/bash) -f "./$(buildFolderName)/$(testResultFolderName)/CodeCov_Merged.xml"
            displayName: 'Publish Code Coverage to Codecov.io'
            condition: succeededOrFailed()

      - job: Test_Integration
        displayName: 'Integration'
        pool:
          vmImage: 'windows-latest'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: configureWinRM
            displayName: 'Configure WinRM'
            inputs:
              targetType: 'inline'
              script: 'winrm quickconfig -quiet'
              pwsh: false
          - task: PowerShell@2
            name: test
            displayName: 'Run Integration Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -CodeCoverageThreshold 0 -PesterScript 'tests/Integration'"
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Integration'

  - stage: Deploy
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], 'dsccommunity')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: PowerShell@2
            name: publishRelease
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
          - task: PowerShell@2
            name: sendChangelogPR
            displayName: 'Send Changelog PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
